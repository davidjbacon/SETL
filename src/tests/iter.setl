PROGRAM test;  $ Test some iterators
  VAR z;
  PRINT ('Compound, 2nd dependent on 1st, try mods of iter vars:');
  f := {[1,[2,3]],[4,[5,6]]};
  PRINT (f);
  LOOP FOR y = f(x), a = y(i) DO
    PRINT (a,i,x,y,f);
    f := 69;
    y := 95;
  END LOOP;
  PRINT (f);
  PRINT ('Compound, independent parts:');
  f := {1,2};
  g := {3,4};
  LOOP FOR x IN f, y IN g DO
    PRINT (x,y);
  END LOOP;
  PRINT ('Slice name as left target:');
  p := 'abc'; q := 'uvwxyz';
  LOOP FOR q(#q-1..) = p(i) DO
    PRINT (i,q);
    $ Mustn't even attempt iteration after going through all of p,
    $ because assigning OM to a slice of q is invalid
    IF i = #p THEN QUIT; END IF;
  END LOOP;
  PRINT (q);
  PRINT ('Bad intercourse between left lhs and rhs:');
  q := 'abcd';
  LOOP FOR q(1..2) = q(i) DO
    PRINT (i,q);
    IF i = 3 THEN QUIT; END IF; $ 4 iterations (orig. #q) would be
                                $ 1 iteration too much
  END LOOP;
  PRINT (q);
  PRINT ('Function call in iteration "constant":');
  z := 11;
  LOOP FOR y IN zorp(x) DO
    PRINT (x,y,z);
  END LOOP;
  PRINT ('Some really weird stuff:');
  r := [5,6,3]; s := [[1,2],3];
  [r(2..2),t] := s;
  PRINT (r, s, t);
  [r(1..3),t] := [[1,2],7];
  PRINT (r, s, t);
  PRINT ([r(1..2),t]);
  $ Quit after 1 iteration; r(1..2) := OM on exhaustion is invalid:
  LOOP FOR [r(1..2),t] IN {s} DO
    PRINT (r, t);
    QUIT;
  END LOOP;
  PRINT ('Alias testing');
  t := [1..5];  PRINT (#t,t);
  t +:= t;      PRINT (#t,t);
  t(6) := t;    PRINT (#t,t);
  t(8..9) := t; PRINT (#t,t);
  t := t(1..5); PRINT (#t,t);
  PRINT ('All done.');
  PROC zorp(RW x);
    PRINT ('zorp');
    x := z;
    z +:= 1;
    RETURN [x,z];
  END PROC zorp;
END PROGRAM test;
