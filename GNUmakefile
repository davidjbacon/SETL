# Top-level makefile for GNU SETL
#
# $Id: GNUmakefile,v 1.10 2022/12/11 17:09:26 setlorg Exp $
#
# Free software (c) dB - see file COPYING for license (GPL).
#
#
# Use this (manually maintained) makefile initially, e.g., by
# invoking make or gmake in the shell.
#
# Note that a GNU Make implementation is required (see INSTALL).
#
# The general intent is to be able to drive all important operations
# from the top level of the build tree.
#
# Most of the work is done by main.mk.  This makefile (GNUmakefile)
# serves as a front end that forwards requests to main.mk, with loc
# pointing to the source dir, after first making sure a build dir has
# been configured.
#
# When you allow the build dir to be separate from the source dir, the
# build dir gets its own GNUmakefile that likewise forwards requests to
# main.mk, again with loc pointing here to the dir containing main.mk.
#
# Maintainers may wish to note that builds in subdirs of the build dir
# (e.g., src, doc) are allowed.  The makefiles at those lower levels are
# all named Makefile (even though they too require GNU Make in order to
# work).  They are generated by configure scripts that are themselves
# pre-generated by Autoconf/Automake tools in conjunction with
# Makefile.am and configure.ac templates in the source tree.


SHELL = /bin/sh

prt = printf '%s\n'

this_makefile := $(lastword $(MAKEFILE_LIST))

srcdir_slash := $(dir $(this_makefile))
# The source dir from the working dir's point of view, sans trailing /:
srcdir := $(srcdir_slash:/=)

ask_yes = $(srcdir)/ask-yes

# Default build dir from the source dir's point of view:
build = ../setl-build

# The makefile to be genned into the build dir if not the source dir:
build_makefile = $(build)/GNUmakefile

.DEFAULT_GOAL := no-args

.PHONY:  no-args help all doc

# If no args were given on the command line, spew some gratuitous help
# and then get on with delighting the user:
no-args:  help
	@$(prt) 'Dropping through to $(MAKE) all...'
	$(MAKE) -f $(this_makefile) all

# This request is a special case in that it forwards directly to main.mk
# without requiring the build dir + config setup to be done first:
help:
	$(MAKE) loc=$(srcdir) -f $(srcdir)/main.mk $@

# These targets are also special because they have to be .PHONY (doc is
# a subdir), and thus are not implicitly matched by the "%" below:
all doc:
	+@$(forward)

# General case, with a double colon in order to catch all requests
# other than the above, even those that might otherwise be fielded by a
# predefined non-match-anything implicit target (see further explanation
# in mkbuild):
%::
	+@$(forward)

# This forwarding recipe code calls mkbuild if needed (with its stderr
# redirected to our stdout) and forwards the $(MAKE) request to main.mk:
define forward
export POSIX_STRICT=1; : to encourage QNX 6+ rm, cp, ls to behave;     \
: Tweakers might put a "set -x;" line here to help debug this monster. ; \
if test -f main.mk; then                                               \
  : We appear to be in the source dir. ;                               \
  : Check also that we are using the scripts from the right place. ;   \
  : On second thought, just let it be undefined if the user does a     \
    make -f /some/cloned-makefile and gets here. ;                     \
  : So in other words, _assume_ we are in the source dir, for better   \
    or worse. ;                                                        \
  if test -f config.parms; then                                        \
    : User already chose to configure and build in the source dir. ;   \
    $(MAKE) loc=. -f main.mk $@;                                       \
  elif { : No config.parms in the source dir, so look for              \
           $(build_makefile) with a "srcdir =" line pointing           \
           back here. ;                                                \
         dot=`pwd`;                                                    \
         test -r "$(build_makefile)" && (                              \
           srcdir=`$(find_srcdir) <"$(build_makefile)" 2>/dev/null`;   \
           test -n "$$srcdir" && {                                     \
             cd $(build);                                              \
             cd "$$srcdir";                                            \
             test "`pwd`" = "$$dot"; } ) 2>/dev/null; }; then          \
    : $(build) already appears to be a build dir. ;                    \
    if $(ask_yes) 'Did you mean to $(MAKE) $@ from $(build)?'; then    \
      $(MAKE) -C "$(build)" $@;                                        \
    elif $(ask_yes) 'Set up another build dir?'; then                  \
      $(try_setup_and_build);                                          \
    else                                                               \
      $(prt) 'Config setup declined.';                                 \
      $(error_exit);                                                   \
    fi;                                                                \
  else                                                                 \
    : No existing config.parms and build dir not found in default loc. ; \
    : Offer to create one, default $(build), and initialize it with    \
      $(build_makefile). ;                                             \
    if $(ask_yes) 'Would you like to set up a build dir?'; then        \
      $(try_setup_and_build);                                          \
    else                                                               \
      $(prt) 'Build dir setup declined.';                              \
      $(error_exit);                                                   \
    fi;                                                                \
  fi;                                                                  \
else                                                                   \
  : We are not in the source dir.  See if it is a build dir. ;         \
  if { : Check for GNUmakefile with a srcdir line locating main.mk ;   \
       test -r GNUmakefile && {                                        \
         srcdir=`$(find_srcdir) <GNUmakefile 2>/dev/null`;             \
         test -n "$$srcdir" &&                                         \
         test -f "$$srcdir/main.mk"; }; }; then                        \
    $(MAKE) loc="$$srcdir" -f "$$srcdir/main.mk" $@;                   \
  else                                                                 \
    $(prt) 'Apparently not in top-level GNU SETL source or build dir.'; \
    $(prt) 'Do you want to set up the current dir ('"`pwd`"')';        \
    if $(ask_yes) 'as the build dir?'; then                            \
      build=. use=yes $(srcdir)/mkbuild 2>&1 >/dev/null &&             \
      $(MAKE) $@;                                                      \
    else                                                               \
      : Offering to create build dir elsewhere when we are not even in \
        the source dir would be going way overboard. ;                 \
      $(prt) 'Don'\''t know how to forward request to $(MAKE) $@';     \
      $(error_exit);                                                   \
    fi;                                                                \
  fi;                                                                  \
fi
endef

find_srcdir = sed -n '/^srcdir *= */{s///p;q}'

define try_setup_and_build
  if { build=`default_build=$(build) ./mkbuild`; } 2>&1; then          \
    $(MAKE) -C "$$build" $@;                                           \
  else                                                                 \
    : User cancelled setting up a build dir. ;                         \
    $(prt) 'Build dir setup aborted.';                                 \
    $(error_exit);                                                     \
  fi
endef

define error_exit
  $(prt) 'Taking error exit.';                                         \
  exit 1
endef
