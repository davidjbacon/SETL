$Id: INSTALL,v 1.24 2022/12/17 18:04:27 setlorg Exp $

Free software (c) dB - see file COPYING for license (GPL).

This file is part of GNU SETL.


Quickstart
----------

You can do a ./configure first if it thrills you, but otherwise an
immediate plain

  $ make

will guide you interactively through the config and build.  Then

  $ make check
  $ make install  [as superuser if necessary]

should require no further interaction.

If you know what you are doing, then invoking ./configure with one or
more command-line arguments will do the setup non-interactively.

See the GNU Make section below if "make" begs you to install it.


General requirements
--------------------

Expect best results for Posixy (Unix-supportive) environments such as
Linux, QNX, Solaris, the BSDs, HP-UX, AIX, IRIX, Darwin, and Cygwin.
See below for system-specific notes.

A few common free development tools such as GCC and Bison are required.

The generic installation instructions in the INSTALL files in subdirs
can be ignored if you are driving all operations from the top level,
which is recommended for most casual users and installers.  But if you
are a maintainer familiar with GNU conventions, the Makefiles created
in build subdirs provide friendly sub-environments too.


Apple Mac / Darwin
------------------

Currently (2022), the best way to get a suitable build environment
appears to be to install Homebrew.  The website mac.install.guide
gives instructions on that.  If it has been properly installed, the
"brew" command in the Terminal app should work.

Note carefully the instructions on setting the PATH and other
Homebrew-related environment variables.  In particular, you should
make sure to do

  eval "$(/path/to/brew shellenv)"

in your shell (typically in a startup file such as .profile, .bashrc,
.zprofile, or .zshrc), substituting for /path/to/brew either
/usr/local/bin/brew or /opt/homebrew/bin/brew depending on where the
brew command got installed.

Installing brew should give you a gcc command that is actually a
wrapper for clang (as "gcc -v" should then indicate).

Use of the gmp-6.1.2 that is bundled with GNU SETL is not recommended,
as the version that comes with Homebrew (currently 6.2.1_1) is newer
and can be installed with

  brew install gmp

before starting the GNU SETL build.


Cross-compiling
---------------

To build GNU SETL for a system other than the one being used for the
build, use a --host arg (a host "alias") when setting up the config.
It is not normally necessary to override --build, which is initialized
using config.guess in the GNU-style configure script invocations.

Naturally, you need an appropriate toolset for compiling and linking
against the host's libraries, and if there is enough harmony between
the host alias and the names of those tools, you might not even need
to specify additional things like CC=... explicitly.

See the GNU Autoconf manual for more details on cross-compilation.


Compiling and cross-compiling on QNX
------------------------------------

Cross-compilation is the normal mode of operation when building for the
real-time operating system QNX.  Although the QNX dev kit (Momentics)
for QNX comes with a gcc driver that can be used for native compilation
on QNX, the cross-compilation command on all Momentics installations is
qcc, which is QNX's repackaging of the GNU C compiler together with
configs for all the supported CPUs.  The qcc command is run on a Linux,
Windows, or QNX platform to produce code for an x86, ppc, arm, etc. CPU
running QNX.

GNU SETL supports QNX cross-compilation with a minimum of fuss.  During
the setup (configuration) phase, when you are prompted for additional
configure script options, you need to compose an argument of the form

  --host={CPU}-qnx{VERSION}

where {CPU} is from the following list, and {VERSION} is 6.3.2, 6.5.0,
or whatever version of QNX Neutrino you want to generate GNU SETL
executables for:

  armbe      [not in 6.5.0]
  armle
  armv7      [not in 6.3.2]
  mipsbe
  mipsle
  ppcbe
  ppcbe-spe  [not in 6.3.2]
  shle
  x86

For example, for a PowerPC SPE architecture running QNX 6.5.0:

  --host=ppcbe-spe-qnx6.5.0

Note that QNX documentation refers to the host on which the compiled
code is to run as the "target", at odds with how GNU uses the terms:

  GNU    QNX
  ---    ---
  build  host
  host   target
  target  ?

(The GNU sense of "target" is not relevant to the SETL interpreter, as
it does not generate machine code.)

TODO:  update the above for QNX 7 versions.


GNU Make
--------

Many systems already use GNU Make as their native "make" command, so
the addition of "gmake" should rarely be necessary.  On Ubuntu, for
example, if "make" isn't present at all on your system, it can be
installed with

  $ sudo apt install make

Similar comments apply for components such as gcc, bison, and m4.

If, however, you already have a "make" command but it tells you that
you need GNU Make when you try to apply it to GNU SETL, you should
install it as "gmake" if possible, and then use the gmake command to
drive all building, checking, installing, uninstalling, cleaning, and
redistributing operations in GNU SETL distributions.

To install gmake, unless you happen to know the right incantations to
grab a prepackaged gmake for your system (and maybe even then), it is
usually easiest to go to the GNU Make page (www.gnu.org/software/make/)
and download its very portable source.  In the unpacked archive do this
(possibly with an extra --prefix={installation-root} on the configure
command if you don't want it to go into /usr/local/...):

  $ ./configure --program-prefix=g
  $ make
  ... privilege elevation if necessary ...
  # make install
